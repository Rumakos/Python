# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# a = float(input('input a: '))
# b = float(input('input b: '))
#
# def divide(a, b):
#     '''Function divide.
#
#     Divide arguments.'''
#     try:
#         print('Result is', round(a / b, 2))
#     except ZeroDivisionError:
#         print("You cannot divide by zero!")
#
# divide(a, b)

# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

# def user_description(**kwargs):
#     '''User info.
#
#     Function returns user data'''
#     return kwargs
#
# print(user_description(user_name = 'Ivan',
#                        surname = 'Ivanov',
#                        year_of_birth = '2000',
#                        city_of_living = 'Moscow',
#                        email = 'ivanov@mail.ru',
#                        phone = '+7 (495) 1234567',
#                        sex = 'male'))

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента
# и возвращает сумму наибольших двух аргументов.

# def sum_2_max(a,b,c):
#     print((a + b + c) - min(a,b,c))
#
# sum_2_max(75, 6, 8)

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

# def my_pow_1(a,b):
#     print(round((a ** b), 4))
#
# my_pow_1(float(input()), int(input()))

# def my_pow_2(x, y):
#     res = 1
#     for i in range(abs(y)):
#         res *= x
#     if y >= 0:
#         return res
#     else:
#         return 1 / res
#
# print(my_pow_2(float(input()), int(input())))

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел
# к полученной ранее сумме и после этого завершить программу.

# def roll_sum():
#     b = 0
#     while True:
#         a = input('Enter: ').split()
#         for el in a:
#             try:
#                 if el == '*':
#                     print(f'Sum is {b}. The end')
#                     return
#                 else:
#                     b += int(el)
#             except ValueError:
#                 print('Enter number or *')
#         print(b)
#
# roll_sum()

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв
# и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре.
# Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

# def int_func(a):
#     a = input()
#     print(a.title())
#
# int_func(a)

# или:

# def int_func(a):
#     print(a.title())
#
# int_func('input text here')

# или:

# def int_func(text):
#     list = []
#     for i in range(len(text)):
#         list.append(text[i][0:1].title() + text[i][1:])
#     return ' '.join(list)
#
#
# def int_func_use():
#     print(int_func(input('Input text: ').split()))
#
# int_func_use()